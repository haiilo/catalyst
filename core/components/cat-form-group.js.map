{"file":"cat-form-group.js","mappings":";;AAAA,MAAM,eAAe,GAAG,sBAAsB;;MCgBjCA,cAAY,iBAAAC,kBAAA,CAAA,MAAA,YAAA,SAAAC,CAAA,CAAA;AALzB,IAAA,WAAA,GAAA;;;;AAMU,QAAA,IAAY,CAAA,YAAA,GAA8B,EAAE;AAIpD;;;;;;AAMG;AACK,QAAA,IAAc,CAAA,cAAA,GAA8C,MAAM;AAE1E;;AAEG;AACK,QAAA,IAAU,CAAA,UAAA,GAAG,KAAK;AA2C3B;AAnCC,IAAA,uBAAuB,CAAC,iBAA4D,EAAA;QAClF,MAAM,YAAY,GAAG,iBAAiB,KAAK,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,iBAAiB;QACzG,IAAI,CAAC,YAAY,CAAC,OAAO,CACvB,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,cAAc,GAAG,YAAY,CAAC,CAC7F;;AAIH,IAAA,mBAAmB,CAAC,aAAsB,EAAA;AACxC,QAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,IAAG;AAClC,YAAA,OAAO,CAAC,UAAU,GAAG,aAAa;AACpC,SAAC,CAAC;;IAGJ,MAAM,GAAA;QACJ,QACE,CAAA,CAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAC,KAAK,EAAE,EAAE,cAAc,EAAE,IAAI,CAAC,SAAS,EAAE,EAAA,EAC7C,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAS,CAAA,CACpD;;IAIH,YAAY,GAAA;AAClB,QAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,IAAI,CAC5B,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,qDAAqD,CAAC,CAC5D;AAC9B,QAAA,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC;AACjD,QAAA,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC;;AAGnC,IAAA,SAAS,CAAC,QAAmC,EAAA;AACnD,QAAA,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM;AACvE,QAAA,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,GAAG,cAAc;QACvD,OAAO,cAAc,IAAI,cAAc,GAAG,UAAU,GAAG,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CatFormGroup","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/cat-form-group/cat-form-group.scss?tag=cat-form-group&encapsulation=shadow","src/components/cat-form-group/cat-form-group.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Element, h, Host, Prop, Watch } from '@stencil/core';\n\ntype HTMLCatFormFieldElement =\n  | HTMLCatInputElement\n  | HTMLCatTextareaElement\n  | HTMLCatSelectElement\n  | HTMLCatDatepickerElement;\n\n/**\n * A form group component to group form fields and labels.\n */\n@Component({\n  tag: 'cat-form-group',\n  styleUrl: 'cat-form-group.scss',\n  shadow: true\n})\nexport class CatFormGroup {\n  private formElements: HTMLCatFormFieldElement[] = [];\n\n  @Element() hostElement!: HTMLElement;\n\n  /**\n   * Whether the labels need a marker to shown if the forms fields are required or optional.<br /><br />\n   * By default, it is set to auto, it will display the mark depending on the number of required and optional fields: <br />\n   * - If there are more required, the optional will be marked.<br />\n   * - If there are less required, it will mark the required.<br /><br />\n   * If a form field had \"!\", the requiredMarked of the field would not change.\n   */\n  @Prop() requiredMarker: 'none' | 'required' | 'optional' | 'auto' = 'auto';\n\n  /**\n   * Whether the label is on top or left.\n   */\n  @Prop() horizontal = false;\n\n  /**\n   * The space allocated to the input label\n   */\n  @Prop() labelSize?: string;\n\n  @Watch('requiredMarker')\n  onRequiredMarkerChanged(newRequiredMarker: 'none' | 'required' | 'optional' | 'auto') {\n    const updateMarker = newRequiredMarker === 'auto' ? this.calculate(this.formElements) : newRequiredMarker;\n    this.formElements.forEach(\n      element => !element.requiredMarker?.endsWith('!') && (element.requiredMarker = updateMarker)\n    );\n  }\n\n  @Watch('horizontal')\n  onHorizontalChanged(newHorizontal: boolean) {\n    this.formElements.forEach(element => {\n      element.horizontal = newHorizontal;\n    });\n  }\n\n  render() {\n    return (\n      <Host style={{ '--label-size': this.labelSize }}>\n        <slot onSlotchange={this.onSlotChange.bind(this)}></slot>\n      </Host>\n    );\n  }\n\n  private onSlotChange(): void {\n    this.formElements = Array.from(\n      this.hostElement.querySelectorAll('cat-input, cat-textarea, cat-select, cat-datepicker')\n    ) as HTMLCatFormFieldElement[];\n    this.onRequiredMarkerChanged(this.requiredMarker);\n    this.onHorizontalChanged(this.horizontal);\n  }\n\n  private calculate(elements: HTMLCatFormFieldElement[]): 'optional' | 'required' {\n    const optionalFields = elements.filter(value => !value.required).length;\n    const requiredFields = elements.length - optionalFields;\n    return requiredFields >= optionalFields ? 'optional' : 'required';\n  }\n}\n"],"version":3}