{"file":"cat-tab.js","mappings":";;AAAA,MAAM,SAAS,GAAG,mDAAmD;;ACGrE,IAAI,YAAY,GAAG,CAAC;MAUPA,QAAM,iBAAAC,kBAAA,CAAA,MAAA,MAAA,SAAAC,CAAA,CAAA;AALnB,IAAA,WAAA,GAAA;;;;;AAQE;;AAEG;AACsB,QAAA,IAAK,CAAA,KAAA,GAAG,EAAE;AAOnC;;AAEG;AACsB,QAAA,IAAQ,CAAA,QAAA,GAAyB,KAAK;AAE/D;;AAEG;AACsB,QAAA,IAAS,CAAA,SAAA,GAAG,KAAK;AAY1C;;AAEG;AACsB,QAAA,IAAW,CAAA,WAAA,GAAG,KAAK;AAE5C;;;;;AAKG;AACsB,QAAA,IAAQ,CAAA,QAAA,GAAG,KAAK;AAEzC;;;;AAIG;AACsB,QAAA,IAAK,CAAA,KAAA,GAAG,KAAK;AA0BvC;IAdC,iBAAiB,GAAA;AACf,QAAA,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE;YACxB,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,CAAW,QAAA,EAAA,YAAY,EAAE,CAAA,CAAE;;;AAKrD,IAAA,OAAO,CAAC,KAAiB,EAAA;AACvB,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;;IAG3B,MAAM,GAAA;QACJ,OAAO,CAAA,CAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CatTab","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/cat-tab/cat-tab.scss?tag=cat-tab&encapsulation=shadow","src/components/cat-tab/cat-tab.tsx"],"sourcesContent":["@use 'variables' as *;\n@use 'mixins' as *;\n\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n","import { Component, h, Prop, Event, EventEmitter, Listen, Host, Element } from '@stencil/core';\nimport { Breakpoint } from '../../utils/breakpoints';\n\nlet nextUniqueId = 0;\n\n/**\n * A single tab inside a tabs component.\n */\n@Component({\n  tag: 'cat-tab',\n  styleUrl: 'cat-tab.scss',\n  shadow: true\n})\nexport class CatTab {\n  @Element() hostElement!: HTMLElement;\n\n  /**\n   * The label of the tab.\n   */\n  @Prop({ reflect: true }) label = '';\n\n  /**\n   * The name of an icon to be displayed in the tab.\n   */\n  @Prop({ reflect: true }) icon?: string;\n\n  /**\n   * Hide the actual button content and only display the tab.\n   */\n  @Prop({ reflect: true }) iconOnly: boolean | Breakpoint = false;\n\n  /**\n   * Display the icon on the right.\n   */\n  @Prop({ reflect: true }) iconRight = false;\n\n  /**\n   * A destination to link to, rendered in the href attribute of a link.\n   */\n  @Prop({ reflect: true }) url?: string;\n\n  /**\n   * Specifies where to open the linked document.\n   */\n  @Prop({ reflect: true }) urlTarget?: '_blank' | '_self';\n\n  /**\n   * Specifies that the tab should be deactivated.\n   */\n  @Prop({ reflect: true }) deactivated = false;\n\n  /**\n   * Specifies that the tab does not have an active state and thus cannot be\n   * activated. This does not mean, that the tab is deactivated. The tab can\n   * still be clicked and emit the `catClick` event. This is helpful if a tab\n   * should only trigger a click action (such as opening a modal).\n   */\n  @Prop({ reflect: true }) noActive = false;\n\n  /**\n   * Specifies that the tab content pane contains an error. This will color\n   * the tab in an error state and also switch to an error icon if an icon\n   * is specified.\n   */\n  @Prop({ reflect: true }) error = false;\n\n  /**\n   * Attributes that will be added to the native HTML button element\n   */\n  @Prop() nativeAttributes?: { [key: string]: string };\n\n  /**\n   * Emitted when tab is clicked.\n   */\n  @Event() catClick!: EventEmitter<MouseEvent>;\n\n  connectedCallback() {\n    if (!this.hostElement.id) {\n      this.hostElement.id = `cat-tab-${nextUniqueId++}`;\n    }\n  }\n\n  @Listen('click')\n  onClick(event: MouseEvent) {\n    this.catClick.emit(event);\n  }\n\n  render() {\n    return <Host></Host>;\n  }\n}\n"],"version":3}