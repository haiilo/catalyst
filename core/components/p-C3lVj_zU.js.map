{"file":"p-C3lVj_zU.js","mappings":";;;AAoBA;;;;;AAKG;AACU,MAAA,WAAW,GAA0C,KAAK,IAAG;IACxE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,KAAK;IACjD,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;AAC7C,IAAA,QACE,CAAe,CAAA,KAAA,EAAA,EAAA,WAAA,EAAA,QAAQ,EAAC,EAAE,EAAE,EAAE,GAAG,OAAO,EAAE,KAAK,EAAC,cAAc,EAC3D,EAAA,MAAM,CAAC;AACN,UAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,MACvB,CAAG,CAAA,GAAA,EAAA,EAAA,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,IAAI,6BAA6B,EAAA,EAAGA,eAAI,CAAC,CAAC,CAAC,CAAA,MAAA,EAAS,GAAG,CAAE,CAAA,EAAE,MAAM,CAAC,CAAK,CACpG;AACH,UAAE;YACE,IAAI;iBACD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAClB,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA,CAAA,GAAA,EAAA,EAAG,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,IAAI,aAAa,EAAG,EAAA,IAAI,CAAK,CAAC,KAE3E,CAAA,CAAA,GAAA,EAAA,EAAG,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,IAAI,aAAa,EAAG,EAAA,IAAI,CAAK,CAC1D,CAAC;YACJ;AACD,SAAA,CACD;AAEV;;;;","names":["i18n"],"sources":["src/components/cat-form-hint/cat-form-hint.tsx"],"sourcesContent":["import { h, FunctionalComponent } from '@stencil/core';\nimport { catI18nRegistry as i18n } from '../cat-i18n/cat-i18n-registry';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ErrorMap = { [key: string]: any };\n\n/**\n * Properties of CatFormHint.\n *\n * @property hint - Optional hint text(s) of the form field.\n * @property slottedHint - Optional hint element of the form field.\n */\ninterface CatFormHintProps {\n  id: string;\n  hint?: string | string[];\n  slottedHint?: HTMLSlotElement;\n  class?: string;\n  errorMap?: ErrorMap | true;\n}\n\n/**\n * CatFormHint is a functional component that represents the hint area of form elements.\n *\n * @param props - {@link CatFormHintProps}\n * @return a JSX.Element\n */\nexport const CatFormHint: FunctionalComponent<CatFormHintProps> = props => {\n  const { id, hint, slottedHint, errorMap } = props;\n  const errors = Object.entries(errorMap || {});\n  return (\n    <div aria-live=\"polite\" id={id + '-hint'} class=\"hint-section\">\n      {errors.length\n        ? errors.map(([key, params]) => (\n            <p class={(props.class ?? '') + ' input-hint cat-text-danger'}>{i18n.t(`error.${key}`, params)}</p>\n          ))\n        : [\n            hint &&\n              (Array.isArray(hint) ? (\n                hint.map(item => <p class={(props.class ?? '') + ' input-hint'}>{item}</p>)\n              ) : (\n                <p class={(props.class ?? '') + ' input-hint'}>{hint}</p>\n              )),\n            slottedHint\n          ]}\n    </div>\n  );\n};\n"],"version":3}