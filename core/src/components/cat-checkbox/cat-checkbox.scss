@use 'variables' as *;
@use 'mixins' as *;
@use 'src/components/cat-form-hint/cat-form-hint';
@use '_snippets/form-label';

$checkbox-width: 1.25rem;
$checkbox-height: 1.25rem;

:host {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

:host([hidden]) {
  display: none;
}

label {
  flex: 0 1 auto;
  display: flex;
  gap: 0.5rem;
  @include cat-body('m');
  @include cat-select(none);
  cursor: pointer;
  position: relative;
}

.label-left {
  flex-direction: row-reverse;

  input {
    right: 1px;
    left: unset;
  }
}

input {
  position: absolute;
  width: $checkbox-width;
  height: $checkbox-height;
  margin: 0;
  opacity: 0;
  cursor: inherit;
  left: 1px;
  top: 0.5px;
}

.box-placeholder {
  width: calc($checkbox-width + 2px);
  flex-shrink: 0;
}

.box {
  flex: 0 0 auto;
  display: flex;
  position: relative;
  height: $checkbox-height;
  width: $checkbox-width;
  background-color: cat-token('color.ui.background.input');
  border: 1px solid cat-token('color.ui.border.dark');
  border-radius: cat-border-radius(s);
  transition:
    background-color cat-token('time.transition.s') ease,
    border-color cat-token('time.transition.s') ease;
  pointer-events: none;
  box-sizing: border-box;

  svg {
    fill: none;
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 16px;
    stroke-dashoffset: 16px;
    transition: all cat-token('time.transition.s') ease;
    width: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.99);
  }

  :checked + & {
    background-color: cat-token('color.theme.primary.bg');
    border-color: cat-token('color.theme.primary.bg');
    stroke: cat-token('color.theme.primary.fill');

    .check {
      stroke-dashoffset: 0;
    }
  }

  :indeterminate + & {
    background-color: cat-token('color.theme.primary.bg');
    border-color: cat-token('color.theme.primary.bg');
    stroke: cat-token('color.theme.primary.fill');

    .check {
      stroke-dashoffset: 16px;
    }

    .dash {
      stroke-dashoffset: 0;
    }
  }

  :focus-visible + & {
    outline: 2px solid cat-token('color.ui.border.focus');
    outline-offset: 1px;
  }

  .is-disabled & {
    background-color: cat-token('color.ui.background.muted');
    border-color: cat-token('color.ui.border.dark');
    stroke: cat-token('color.ui.font.muted');
  }
}

:host(.cat-error) {
  .box {
    border: 1px solid cat-token('color.theme.danger.bg');
  }

  :checked + .box,
  :indeterminate + .box {
    background-color: cat-token('color.theme.danger.bg');
    border-color: cat-token('color.theme.danger.bg');
    stroke: cat-token('color.theme.danger.fill');
  }
}

.label {
  flex: 1 1 auto;
  min-width: 0;

  .is-hidden & {
    @include cat-visually-hidden;
  }
}

.is-disabled {
  cursor: not-allowed;
  color: cat-token('color.ui.font.muted');
}

.align-center {
  align-items: center;
}

.align-end {
  align-items: flex-end;
}
